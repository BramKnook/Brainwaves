//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scenes/Scene2_CherryBomb/Input System/StrawberryBoxControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @StrawberryBoxControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @StrawberryBoxControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""StrawberryBoxControls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""8f60475c-2084-41a6-b837-4fb605b8f19b"",
            ""actions"": [
                {
                    ""name"": ""MoveBox"",
                    ""type"": ""Button"",
                    ""id"": ""11d54052-d402-4f97-a744-249a6d9e292c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""625dcaea-c78a-4edd-a5af-e69265f137ff"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveBox"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_MoveBox = m_Gameplay.FindAction("MoveBox", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_MoveBox;
    public struct GameplayActions
    {
        private @StrawberryBoxControls m_Wrapper;
        public GameplayActions(@StrawberryBoxControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveBox => m_Wrapper.m_Gameplay_MoveBox;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @MoveBox.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMoveBox;
                @MoveBox.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMoveBox;
                @MoveBox.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMoveBox;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveBox.started += instance.OnMoveBox;
                @MoveBox.performed += instance.OnMoveBox;
                @MoveBox.canceled += instance.OnMoveBox;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnMoveBox(InputAction.CallbackContext context);
    }
}
